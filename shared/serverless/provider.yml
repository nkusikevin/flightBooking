provider:
  name: aws
  region: "eu-central-1"
  stage: ${opt:stage, 'dev'}
  architecture: arm64
  environment:
    FLIGHTS_TABLE: !ImportValue ${opt:stage, self:provider.stage, 'dev'}-flights
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
          Resource:
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
            - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*/index/*"
        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - scheduler:CreateSchedule
            - scheduler:DeleteSchedule
          Resource:
            - "*"
        - Effect: Allow
          Action:
            - iam:PassRole
          Resource:
            - !Sub
              - arn:aws:iam::${AWS::AccountId}:role/ScheduledEventExecutionRole
              - {}
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - !Sub "arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:*"
        - Effect: Allow
          Action:
            - events:PutEvents
          Resource:
            - !Sub "arn:aws:events:${AWS::Region}:${AWS::AccountId}:event-bus/*"
package:
  individually: true
plugins:
  - serverless-iam-roles-per-function
